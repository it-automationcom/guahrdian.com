#!/usr/bin/python3
#{{{import
import osm
import dgm
import river as ri
import pbf
import configparser
import os
import utm
from geopy.geocoders import Nominatim
import time
from pprint import pprint
#}}}
#{{{parse config
config=configparser.ConfigParser()
configfile=os.path.dirname(__file__)+'/../config.ini'
config.read(configfile)
output_html=config['dev']['output']
#}}}
#{{{setup map
nominatim = Nominatim(user_agent="tutorial")
#location=nominatim.geocode("Altenahr, Ahrweiler"+" ,Rheinland-Pfalz").raw
location=nominatim.geocode("Dernau, Ahrweiler"+" ,Rheinland-Pfalz").raw
lat=float(location["lat"])
lon=float(location["lon"])
map0=osm.map()
map0.set_boundaries(2,2,2,2)
#map0.from_deg(6.99,50.516,14)
map0.from_deg(lon,lat,15)
#}}}
#{{{add maplayers to map
maplayer0=osm.maplayer(map0)
maplayer1=osm.maplayer(map0)
maplayer2=osm.maplayer(map0)
maplayer3=osm.maplayer(map0)
maplayer4=osm.maplayer(map0)
maplayer5=osm.maplayer(map0)
#}}}
#{{{rivers
for i in config['rivers']:
    river=osm.trace("http://localhost:8000/osm/",i)
    polyline5=osm.polyline(river.get_points(),maplayer5)
    del river
#}}}
#{{{single points
point1=osm.point(maplayer0)
point1.from_deg(lon,lat)
point2=osm.point(maplayer0)
point2.from_deg(8.08,50.28)
point3=osm.point(maplayer0)
point3.from_deg(7.207,50.28)
#}}}
#{{{zone by altitude
mesh=dgm.grid(25)
mesh.zones(-150)
map0.calculate()
mesh.load_from_bbox_utm(maplayer0.get_bbox_utm())
#mesh.interpolation(1)
zones=mesh.zones_from_utm(357300.0,5595000.0)
maplayer0.set_name("layer0")
for i in zones:
   polygon1=osm.polygon(i,maplayer0)
   del polygon1
del mesh
#}}}
#{{{flood_zone ahr
river_trace=osm.trace("http://localhost:8000/osm",318372)
points=river_trace.get_points()
traced=ri.river(points)
traced.load_dataframe()
mesh=dgm.grid(25)
map0.calculate()
mesh.load_from_bbox_utm(maplayer0.get_bbox_utm())
#print("Vischelbach Flood Zones")
#print("")
mesh.inject_dataframe(traced.get_dataframe())
mesh.zones(-9)
#mesh.interpolation(1)
zones=mesh.zones_from_utm(357300.0,5595000.0)
maplayer0.set_name("layer0")
for i in zones:
   polygon1=osm.polygon(i,maplayer0)
   del polygon1
del mesh
#}}}
#{{{full map zone
#mesh=dgm.grid(25)
#map0.calculate()
#mesh.load_from_bbox_utm(maplayer0.get_bbox_utm())
#}}}
#{{{write map to file
with open(output_html, mode="wt") as f:
    print("<html><head><link rel=\"stylesheet\" href=\"style.css\"/>")
    with open('includes/js', 'r') as f:
        print(f.read())
    print("</head><body>")
    with open('includes/buttons', 'r') as f:
        print(f.read())
    print("<div class=\"mapcontainer\">")
    print("<div class=\"map\" style=\"position:relative\">")
    maplayer0.display()
    maplayer1.display()
    maplayer2.display()
    maplayer3.display()
    maplayer4.display()
    maplayer5.display()
    map0.display()
    print("</div>")
    print("</div>")
    map0.print()
    point1.print()
    maplayer0.print()
    print("</body></html>")
    #}}}
# vim:foldmethod=marker:foldlevel=0
